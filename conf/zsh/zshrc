# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
# https://github.com/romkatv/powerlevel10k
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Source Prezto.
# https://github.com/sorin-ionescu/prezto
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
  # for history-substring-search module, this configuration may no longer be needed in the future
  export HISTORY_SUBSTRING_SEARCH_PREFIXED=true
  export HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE=true
fi

# YADR
# https://github.com/skwp/dotfiles
if [[ -d ~/.yadr ]]; then
  for config_file ($HOME/.yadr/zsh/*.zsh) source $config_file
fi

# Homebrew
# https://brew.sh/
if (( $+commands[brew] )); then
  eval "$(brew shellenv)"
  export HOMEBREW_CASK_OPTS="--appdir=/Applications"
  export BYOBU_PREFIX="${HOMEBREW_PREFIX}"
  FPATH="${HOMEBREW_PREFIX}/share/zsh/site-functions:${FPATH}"
  autoload -Uz compinit
  compinit
  # CNF
  # https://github.com/Homebrew/homebrew-command-not-found
  HB_CNF_HANDLER="${HOMEBREW_REPOSITORY}/Library/Taps/homebrew/homebrew-command-not-found/handler.sh"
  if [[ -f "$HB_CNF_HANDLER" ]]; then
    source "$HB_CNF_HANDLER";
  fi
  # asdf
  # https://asdf-vm.com/
  if [[ -f "${HOMEBREW_PREFIX}/opt/asdf/libexec/asdf.sh" ]]; then
    . ${HOMEBREW_PREFIX}/opt/asdf/asdf.sh
  fi
  # thefuck
  # https://github.com/nvbn/thefuck
  if (( $+commands[thefuck] )); then
    eval $(thefuck --alias)
    alias fu='fuck'
  fi
  # bat
  # https://github.com/sharkdp/bat
  if (( $+commands[bat] )); then
    export BAT_THEME="Solarized (dark)"
    alias cat='bat'
  fi
  # exa
  # https://github.com/ogham/exa
  if (( $+commands[exa] )); then
    alias ll='exa -l'
    alias ls='exa'
  fi
  # fzf
  # https://github.com/junegunn/fzf
  if (( $+commands[fzf] )); then
    alias f='fzf --preview "bat --color \"always\" {}"'
    export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(code {})+abort'"
  fi
  # glances
  # https://nicolargo.github.io/glances/
  if (( $+commands[glances] )); then
    alias top='glances'
  fi
  # ncdu
  # https://g.blicky.net/ncdu.git/
  if (( $+commands[ncdu] )); then
      if [[ "$OSTYPE" =~ ^linux ]]; then
          alias ncdu='ncdu --color dark --exclude-kernfs'
      else
          alias ncdu='ncdu --color dark'
      fi
  fi
  # tldr
  # https://tldr.sh/
  # if (( $+commands[tldr] )); then
  #   alias man='tldr'
  # fi
  # xh
  # https://github.com/ducaale/xh
  if (( $+commands[xh] )); then
      alias http='xh'
      alias https='xh --https'
  fi
  # tmux
  # https://github.com/tmux/tmux
  if (( $+commands[tmux] )); then
    alias tmux='tmux a'
  fi
  if [[ -d "${HOMEBREW_PREFIX}/opt/openblas" ]]; then
    export OPENBLAS="${HOMEBREW_PREFIX}/opt/openblas"
  fi
  # openssl
  # https://openssl.org/
  if [[ -d "${HOMEBREW_PREFIX}/opt/openssl" ]]; then
    CPPFLAGS+=" -I${HOMEBREW_PREFIX}/opt/openssl/include"
    export CPPFLAGS
    LDFLAGS+=" -L${HOMEBREW_PREFIX}/opt/openssl/lib"
    export LDFLAGS
    PKG_CONFIG_PATH+="${HOMEBREW_PREFIX}/opt/openssl/lib/pkgconfig"
    export PKG_CONFIG_PATH
    export PATH="${PATH}:${HOMEBREW_PREFIX}/opt/openssl/bin"
  fi
  if [[ -d "${HOMEBREW_PREFIX}/opt/zlib" ]]; then
    CFLAGS+=" -I${HOMEBREW_PREFIX}/opt/zlib/include"
    export CFLAGS
    LDFLAGS+=" -L${HOMEBREW_PREFIX}/opt/zlib/lib"
    export LDFLAGS
  fi
  # miniforge
  # https://github.com/conda-forge/miniforge
  __conda_setup="$(\"${HOMEBREW_PREFIX}/Caskroom/miniforge/base/bin/conda\" 'shell.zsh' 'hook' 2> /dev/null)"
  if [ $? -eq 0 ]; then
      eval "$__conda_setup"
  else
      if [ -f "${HOMEBREW_PREFIX}/Caskroom/miniforge/base/etc/profile.d/conda.sh" ]; then
          . "${HOMEBREW_PREFIX}/Caskroom/miniforge/base/etc/profile.d/conda.sh"
      else
          export PATH="${HOMEBREW_PREFIX}/Caskroom/miniforge/base/bin:$PATH"
      fi
  fi
  unset __conda_setup
  # Anaconda
  # https://www.anaconda.com/
  if [[ -d "${HOMEBREW_PREFIX}/anaconda3/bin" ]]; then
    export PATH="${PATH}:${HOMEBREW_PREFIX}/anaconda3/bin"
  fi
  if [[ -d "${HOMEBREW_PREFIX}/opt/curl/bin" ]]; then
    export PATH="${HOMEBREW_PREFIX}/opt/curl/bin:${PATH}"
  fi
  if [[ -d "${HOMEBREW_PREFIX}/opt/perl/bin" ]]; then
    export PATH="${HOMEBREW_PREFIX}/opt/perl/bin:${PATH}"
  fi
  if [[ -d "${HOMEBREW_PREFIX}/opt/ruby/bin" ]]; then
    export PATH="${HOMEBREW_PREFIX}/opt/ruby/bin:${PATH}"
  fi
  # google-cloud-sdk
  # https://cloud.google.com/sdk/
  if [[ -d "${HOMEBREW_PREFIX}/Caskroom/google-cloud-sdk/latest/google-cloud-sdk" ]]; then
    source "${HOMEBREW_PREFIX}/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
    source "${HOMEBREW_PREFIX}/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"
  fi
fi

# Bash-my-AWS
# https://github.com/bash-my-aws/bash-my-aws
if [[ -d "${BMA_HOME:-$HOME}/.bash-my-aws" ]]; then
  export PATH="${PATH}:${BMA_HOME:-$HOME/.bash-my-aws}/bin"
  source ${BMA_HOME:-$HOME/.bash-my-aws}/aliases
  autoload -U +X compinit && compinit
  autoload -U +X bashcompinit && bashcompinit
  source ${BMA_HOME:-$HOME/.bash-my-aws}/bash_completion.sh
fi

if [[ -f "${HOME}/bin/get-cli-sudo-pass.sh" ]]; then
  export SUDO_ASKPASS=${HOME}/bin/get-cli-sudo-pass.sh
fi

# diff-so-fancy
# https://github.com/so-fancy/diff-so-fancy
if (( $+commands[diff-so-fancy] )); then
  # pretty diff(need to install diff-so-fancy)
  # brew install diff-so-fancy OR npm i -g diff-so-fancy
  function dsf(){
    diff -u $@ | diff-so-fancy | less --tabs=4 -RFX
  }
fi

# gitignore
# https://docs.gitignore.io/install/command-line
function gig() {
  curl -sLw "\n" https://www.toptal.com/developers/gitignore/api/$@ ;
}

# rustup
# https://github.com/rust-lang/rustup
if [[ -f "$HOME/.cargo/env" ]]; then
  . "$HOME/.cargo/env"
fi

[[ ! -f ~/.zshrc.local ]] || source ~/.zshrc.local

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
(( ! ${+functions[p10k]} )) || p10k finalize

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
