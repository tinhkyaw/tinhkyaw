# Start configuration added by Zim install {{{
#
# User configuration sourced by interactive shells
#

# -----------------
# Zsh configuration
# -----------------

#
# History
#

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS

#
# Input/output
#

# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -e

# Prompt for spelling correction of commands.
#setopt CORRECT

# Customize spelling correction prompt.
#SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

# Remove path separator from WORDCHARS.
WORDCHARS=${WORDCHARS//[\/]}

# -----------------
# Zim configuration
# -----------------

# Use degit instead of git as the default tool to install and update modules.
zstyle ':zim:zmodule' use 'degit'

# --------------------
# Module configuration
# --------------------

#
# git
#

# Set a custom prefix for the generated aliases. The default prefix is 'G'.
#zstyle ':zim:git' aliases-prefix 'g'

#
# input
#

# Append `../` to your input for each `.` you type after an initial `..`
#zstyle ':zim:input' double-dot-expand yes

#
# termtitle
#

# Set a custom terminal title format using prompt expansion escape sequences.
# See http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Simple-Prompt-Escapes
# If none is provided, the default '%n@%m: %~' is used.
#zstyle ':zim:termtitle' format '%1~'

#
# zsh-autosuggestions
#

# Disable automatic widget re-binding on each precmd. This can be set when
# zsh-users/zsh-autosuggestions is the last module in your ~/.zimrc.
ZSH_AUTOSUGGEST_MANUAL_REBIND=1

# Customize the style that the suggestions are shown with.
# See https://github.com/zsh-users/zsh-autosuggestions/blob/master/README.md#suggestion-highlight-style
#ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=242'

#
# zsh-syntax-highlighting
#

# Set what highlighters will be used.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Customize the main highlighter styles.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md#how-to-tweak-it
#typeset -A ZSH_HIGHLIGHT_STYLES
#ZSH_HIGHLIGHT_STYLES[comment]='fg=242'

# ------------------
# Initialize modules
# ------------------

ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim
# Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  if (( ${+commands[curl]} )); then
    curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  else
    mkdir -p ${ZIM_HOME} && wget -nv -O ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  fi
fi
# Install missing modules, and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZIM_CONFIG_FILE:-${ZDOTDIR:-${HOME}}/.zimrc} ]]; then
  source ${ZIM_HOME}/zimfw.zsh init
fi
# Initialize modules.
source ${ZIM_HOME}/init.zsh

# ------------------------------
# Post-init module configuration
# ------------------------------

#
# zsh-history-substring-search
#

zmodload -F zsh/terminfo +p:terminfo
# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
for key ('^[[A' '^P' ${terminfo[kcuu1]}) bindkey ${key} history-substring-search-up
for key ('^[[B' '^N' ${terminfo[kcud1]}) bindkey ${key} history-substring-search-down
for key ('k') bindkey -M vicmd ${key} history-substring-search-up
for key ('j') bindkey -M vicmd ${key} history-substring-search-down
unset key
# }}} End configuration added by Zim install

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
# https://github.com/romkatv/powerlevel10k
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

ulimit -n unlimited
# YADR
# https://github.com/skwp/dotfiles
if [[ -d ~/.yadr ]]; then
  for config_file ($HOME/.yadr/zsh/*.zsh) source $config_file
fi
typeset -TUx PKG_CONFIG_PATH pkg_config_path
# uv tool
# https://docs.astral.sh/uv/guides/tools/#installing-tools
if [[ -d "${HOME}/.local/bin" ]]; then
  path+=${HOME}/.local/bin
fi
# Homebrew
# https://brew.sh/
if (( $+commands[brew] )); then
  # CNF
  # https://github.com/Homebrew/homebrew-command-not-found
  HB_CNF_HANDLER="${HOMEBREW_REPOSITORY}/Library/Taps/homebrew/homebrew-command-not-found/handler.sh"
  if [[ -f "$HB_CNF_HANDLER" ]]; then
    source "$HB_CNF_HANDLER";
  fi
  # asdf
  # https://asdf-vm.com/
  if [[ -f "${HOMEBREW_PREFIX}/opt/asdf/libexec/asdf.sh" ]]; then
    source ${HOMEBREW_PREFIX}/opt/asdf/libexec/asdf.sh
  fi
  # bat
  # https://github.com/sharkdp/bat
  if (( $+commands[bat] )); then
    export BAT_THEME="Solarized (dark)"
    alias cat='bat'
  fi
  # eza
  # https://github.com/eza-community/eza
  if (( $+commands[eza] )); then
    alias ll='eza --all --header --git --group --long --icons -a -s type'
    alias ls='eza -G  --color auto --icons -a -s type'
  fi
  # thefuck
  # https://github.com/nvbn/thefuck
  if (( $+commands[thefuck] )); then
    eval $(thefuck --alias)
    alias fu='fuck'
  fi
  # fzf
  # https://github.com/junegunn/fzf
  if (( $+commands[fzf] )); then
    alias f='fzf --preview "bat --color \"always\" {}"'
    export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(code {})+abort'"
  fi
  # glances
  # https://nicolargo.github.io/glances/
  if (( $+commands[glances] )); then
    alias top='glances'
  fi
  # lsd
  # https://github.com/lsd-rs/lsd
  if (( $+commands[lsd] )); then
    alias l='lsd -l'
    alias la='lsd -a'
    alias lla='lsd -la'
    alias lt='lsd --tree'
  fi
  # ncdu
  # https://g.blicky.net/ncdu.git/
  if (( $+commands[ncdu] )); then
    if [[ "$OSTYPE" =~ ^linux ]]; then
      alias ncdu='ncdu --color dark --exclude-kernfs'
    else
      alias ncdu='ncdu --color dark'
    fi
  fi
  # vivid
  # https://github.com/sharkdp/vivid
  if (( $+commands[vivid] )); then
    export LS_COLORS="$(vivid generate solarized-dark)"
  fi
  # xh
  # https://github.com/ducaale/xh
  if (( $+commands[xh] )); then
    alias http='xh'
    alias https='xh --https'
  fi
  # tmux
  # https://github.com/tmux/tmux
  if (( $+commands[tmux] )); then
    alias tmux='tmux a'
  fi
  if [[ -d "${HOMEBREW_PREFIX}/opt/grep/libexec/gnubin" ]]; then
    path=("${HOMEBREW_PREFIX}/opt/grep/libexec/gnubin" $path)
  fi
  if [[ -d "${HOMEBREW_PREFIX}/opt/openblas" ]]; then
    OPENBLAS_PREFIX=${HOMEBREW_PREFIX}/opt/openblas
    export OPENBLAS="${OPENBLAS_PREFIX}"
  fi
  # openssl
  # https://openssl.org/
  if [[ -d "${HOMEBREW_PREFIX}/opt/openssl" ]]; then
    OPENSSL_PREFIX=${HOMEBREW_PREFIX}/opt/openssl
    CPPFLAGS+=" -I${OPENSSL_PREFIX}/include"
    LDFLAGS+=" -L${OPENSSL_PREFIX}/lib"
    path+=${OPENSSL_PREFIX}/bin
    pkg_config_path+=${OPENSSL_PREFIX}/lib/pkgconfig
  fi
  if [[ -d "${HOMEBREW_PREFIX}/opt/zlib" ]]; then
    ZLIB_PREFIX=${HOMEBREW_PREFIX}/opt/zlib
    CFLAGS+=" -I${ZLIB_PREFIX}/include"
    LDFLAGS+=" -L${ZLIB_PREFIX}/lib"
  fi
  # miniforge
  # https://github.com/conda-forge/miniforge
  # >>> conda initialize >>>
  # !! Contents within this block are managed by 'conda init' !!
  __conda_setup="$(\"${HOMEBREW_PREFIX}/Caskroom/miniforge/base/bin/conda\" 'shell.zsh' 'hook' 2> /dev/null)"
  if [ $? -eq 0 ]; then
    eval "$__conda_setup"
  else
    if [ -f "${HOMEBREW_PREFIX}/Caskroom/miniforge/base/etc/profile.d/conda.sh" ]; then
      source "${HOMEBREW_PREFIX}/Caskroom/miniforge/base/etc/profile.d/conda.sh"
    else
      path+=${HOMEBREW_PREFIX}/Caskroom/miniforge/base/bin
    fi
  fi
  unset __conda_setup
  # <<< conda initialize <<<
  # Anaconda
  # https://www.anaconda.com/
  if [[ -d "${HOMEBREW_PREFIX}/anaconda3/bin" ]]; then
    path+=${HOMEBREW_PREFIX}/anaconda3/bin
  fi
  for formula in curl perl ruby;do
    if [[ -d "${HOMEBREW_PREFIX}/opt/$formula" ]]; then
      FORMULA_PREFIX=${HOMEBREW_PREFIX}/opt/$formula
      path=(${FORMULA_PREFIX}/bin $path)
    fi
  done
  # google-cloud-sdk
  # https://cloud.google.com/sdk/
  if [[ -d "${HOMEBREW_PREFIX}/Caskroom/google-cloud-sdk/latest/google-cloud-sdk" ]]; then
    source "${HOMEBREW_PREFIX}/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
    source "${HOMEBREW_PREFIX}/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"
  fi
  export CFLAGS
  export CPPFLAGS
  export LDFLAGS
  export HOMEBREW_CASK_OPTS="--appdir=/Applications"
  export BYOBU_PREFIX="${HOMEBREW_PREFIX}"
fi
# doomemacs
# https://github.com/doomemacs/doomemacs
if [[ -d "${HOME}/.config/emacs/bin" ]]; then
  path+=${HOME}/.config/emacs/bin
fi
# docker
# https://www.docker.com/products/docker-desktop
if [[ -d "${HOME}/.docker/bin" ]]; then
  path+=${HOME}/.docker/bin
fi
if [[ -f "${HOME}/bin/get-cli-sudo-pass.zsh" ]]; then
  export SUDO_ASKPASS=${HOME}/bin/get-cli-sudo-pass.zsh
fi
# diff-so-fancy
# https://github.com/so-fancy/diff-so-fancy
if (( $+commands[diff-so-fancy] )); then
  # pretty diff(need to install diff-so-fancy)
  # brew install diff-so-fancy OR npm i -g diff-so-fancy
  function dsf(){
    diff -u $@ | diff-so-fancy | less --tabs=4 -RFX
  }
fi
# gitignore
# https://docs.gitignore.io/install/command-line
function gig() {
  curl -sLw "\n" https://www.toptal.com/developers/gitignore/api/$@ ;
}
# rustup
# https://github.com/rust-lang/rustup
if [[ -f "$HOME/.cargo/env" ]]; then
  source "$HOME/.cargo/env"
fi
[[ ! -f ~/.zshrc.local ]] || source ~/.zshrc.local
set +o vi # HACK for zimfw update
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
(( ! ${+functions[p10k]} )) || p10k finalize
#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
